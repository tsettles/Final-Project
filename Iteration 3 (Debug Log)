// include SPI, MP3 and SD libraries
#include <SPI.h>
#include <Adafruit_VS1053.h>
#include <SD.h>

// define the pins used
//#define CLK 13       // SPI Clock, shared with SD card
//#define MISO 12      // Input data, from VS1053/SD card
//#define MOSI 11      // Output data, to VS1053/SD card
// Connect CLK, MISO and MOSI to hardware SPI pins. 
// See http://arduino.cc/en/Reference/SPI "Connections"

// These are the pins used for the breakout example
#define BREAKOUT_RESET  9      // VS1053 reset pin (output)
#define BREAKOUT_CS     10     // VS1053 chip select pin (output)
#define BREAKOUT_DCS    8      // VS1053 Data/command select pin (output)
// These are the pins used for the music maker shield
#define SHIELD_RESET  -1      // VS1053 reset pin (unused!)
#define SHIELD_CS     7      // VS1053 chip select pin (output)
#define SHIELD_DCS    6      // VS1053 Data/command select pin (output)

// These are common pins between breakout and shield
#define CARDCS 4     // Card chip select pin
// DREQ should be an Int pin, see http://arduino.cc/en/Reference/attachInterrupt
#define DREQ 3       // VS1053 Data request, ideally an Interrupt pin

const int numPanels = 4;
const int numSensors = 4;

Adafruit_VS1053_FilePlayer musicPlayer = 
  // create breakout-example object!
  //Adafruit_VS1053_FilePlayer(BREAKOUT_RESET, BREAKOUT_CS, BREAKOUT_DCS, DREQ, CARDCS);
  // create shield-example object!
  Adafruit_VS1053_FilePlayer(SHIELD_RESET, SHIELD_CS, SHIELD_DCS, DREQ, CARDCS);

char* fileNames[] = {
  "track001.wav",
  "track002.wav",
  "track003.wav",
  "track004.wav",
  "track005.wav"
};

boolean activePanels[numPanels];

int whichPanel(int analogValue) {
  Serial.println(analogValue);
  // -1 means no panel!
  if (70 < analogValue && analogValue < 90) {
    return 0;
  }

  if (40 < analogValue && analogValue < 60) {
    return 1;
  }

  if (7300 < analogValue && analogValue < 7800) {
    return 2;
  }

  if (1900 < analogValue && analogValue < 2200) {
    return 3;
  }
  return -1;
}
void updateActives() {
  boolean currentlyActive[numPanels];
  for (int i = 0; i < numPanels; i = i + 1) {
    currentlyActive[i] = false;
  }
  
  for (int i = 0; i < numSensors; i = i + 1) {
    int activePanel = whichPanel(analogRead(i));
    if (activePanel >= 0) {
      if (! activePanels[activePanel]) {
        Serial.print("Activating panel ");
        Serial.print(activePanel);
        Serial.print(" - ");
        Serial.println(fileNames[activePanel]);
        musicPlayer.startPlayingFile(fileNames[activePanel]);
      }
      currentlyActive[activePanel] = true;
    }
  }
  for (int i = 0; i < numPanels; i = i + 1) {
    activePanels[i] = currentlyActive[i];
  }
}
  
void setup() {
  Serial.begin(9600);
  Serial.println("Adafruit VS1053 Simple Test");
  for (int i = 0; i < numPanels; i = i + 1) {
    activePanels[i] = false;
  }

  if (! musicPlayer.begin()) { // initialise the music player
     Serial.println(F("Couldn't find VS1053, do you have the right pins defined?"));
     while (1);
  }
  Serial.println(F("VS1053 found"));
  
  SD.begin(CARDCS);    // initialise the SD card
  
  // Set volume for left, right channels. lower numbers == louder volume!
  musicPlayer.setVolume(20,20);

  // Timer interrupts are not suggested, better to use DREQ interrupt!
  //musicPlayer.useInterrupt(VS1053_FILEPLAYER_TIMER0_INT); // timer int

  // If DREQ is on an interrupt pin (on uno, #2 or #3) we can do background
  // audio playing
  musicPlayer.useInterrupt(VS1053_FILEPLAYER_PIN_INT);  // DREQ int
  
//  // Play one file, don't return until complete
//  Serial.println(F("Playing track 001"));
//  musicPlayer.playFullFile(fileNames[0]);
//  // Play another file in the background, REQUIRES interrupts!
//  Serial.println(F("Playing track 002"));
//  musicPlayer.startPlayingFile("track002.mp3");
//  Serial.println(F("Playing track 003"));
//  musicPlayer.startPlayingFile("track003.mp3");
//  Serial.println(F("Playing track 004"));
//  musicPlayer.startPlayingFile("track004.mp3");

  int pins[] = {A0, A1, A2, A3, A4, A5};
  for (int i = 0; i < numSensors; i = i+1) {
    pinMode(pins[i], INPUT_PULLUP);
  }
}

void loop() {
  updateActives();
  // File is playing in the background
//  if (musicPlayer.stopped()) {
//    Serial.println("Done playing music");
////    while (1);
//  }
//  if (Serial.available()) {
//    char c = Serial.read();
//    
//    // if we get an 's' on the serial console, stop!
//    if (c == 's') {
//      musicPlayer.stopPlaying();
//    }
//    
//    // if we get an 'p' on the serial console, pause/unpause!
//    if (c == 'p') {
//      if (! musicPlayer.paused()) {
//        Serial.println("Paused");
//        musicPlayer.pausePlaying(true);
//      } else { 
//        Serial.println("Resumed");
//        musicPlayer.pausePlaying(false);
//      }
//    }
//  }

  delay(100);
}
/*pin 0 2700
pin 1 4700
pin 2 7500
pin 3 2000*/
